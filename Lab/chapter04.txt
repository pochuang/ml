import numpy as np
from sklearn.linear_model import LogisticRegression
X = [0.5,0.75,1.0,1.25,1.5,1.75,1.75,2.0,2.25,2.5,2.75,3.0,3.25,3.5,4.0,4.25,4.5,4.75,5.0,5.5]
y = [0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1]
X = np.array([[x] for x in X])
y = np.ravel(y)
model = LogisticRegression(C=1000000.)
--------------------------------------------------------------------------------------------------
>>> model
LogisticRegression(C=1000000.0, class_weight=None, dual=False,
          fit_intercept=True, intercept_scaling=1, max_iter=100,
          multi_class='ovr', n_jobs=1, penalty='l2', random_state=None,
          solver='liblinear', tol=0.0001, verbose=0, warm_start=False)
--------------------------------------------------------------------------------------------------		  
model.fit(X,y)
model.score(X,y)
print('coef', model.coef_)
print('intercept', model.intercept_)

--預測讀書3小時,是否可能通過考試
model.predict(3)

def sigmoid(h):    
    p = -4.07769916+(1.50464059*h)    
    return 1.0 / (1.0 + np.exp(-p))

--sigmoid(h) >= 0.5 => 1
--sigmoid(h) <  0.5 => 0

--顯示數值	
>>> sigmoid(2)       --model.predict(2)=> 0
0.25570405703256799
>>> sigmoid(3)       --model.predict(3)=> 1
0.6073585871706797

from sklearn import datasets
import numpy as np
from sklearn.cross_validation import train_test_split
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

def plot_decision_regions(X, y, classifier, test_idx=None, resolution=0.02):
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0], y=X[y == cl, 1],alpha=0.8, c=cmap(idx),marker=markers[idx], label=cl)
    if test_idx:
        X_test, y_test = X[test_idx, :], y[test_idx]
        plt.scatter(X_test[:, 0], X_test[:, 1], c='yellow', alpha=1.0, linewidth=1, marker='o', s=55, label='test set')


iris = datasets.load_iris()

>>> iris.data
array([[ 5.1,  3.5,  1.4,  0.2],    0
       [ 4.9,  3. ,  1.4,  0.2],    1
       [ 4.7,  3.2,  1.3,  0.2],    2
       [ 4.6,  3.1,  1.5,  0.2],    3
       [ 5. ,  3.6,  1.4,  0.2],
       [ 5.4,  3.9,  1.7,  0.4],
       [ 4.6,  3.4,  1.4,  0.3],
	      0      1     2     3
--X為花瓣的長/寬
         -row,column
iris.data[0,3,[2,3]]			
X = iris.data[:, [2, 3]]
y = iris.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

X_combined_std = np.vstack((X_train_std, X_test_std))
y_combined = np.hstack((y_train, y_test))

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression(C=1000.0, random_state=0)
lr.fit(X_train_std, y_train)
lr.predict_proba(X_test_std[0,:])
plot_decision_regions(X_combined_std, y_combined, classifier=lr, test_idx=range(105,150))
#plot_decision_regions(X_combined_std, y_combined, classifier=lr)
plt.xlabel('petal length [standardized]')
plt.ylabel('petal width [standardized]')
plt.legend(loc='upper left')
plt.show()



import pandas as pd
import uniout
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model.logistic import LogisticRegression
from sklearn.cross_validation import train_test_split
df = pd.read_csv('c:\pyml_scripts\chapter04_logregression\SMSSpamCollection',delimiter='\t',header=None)
print('含spam簡訊數量:',df[df[0] == 'spam'][0].count())
print('含ham簡訊數量:',df[df[0] == 'ham'][0].count())
X_train_raw, X_test_raw, y_train, y_test = train_test_split(df[1],df[0])
X_train_raw.count() 
vectorizer = TfidfVectorizer()
X_train = vectorizer.fit_transform(X_train_raw)
X_test = vectorizer.transform(X_test_raw)
clf = LogisticRegression()
clf.fit(X_train,y_train)
y_predictions = clf.predict(X_test)
for i,prediction in enumerate(y_predictions[-10:]):    
    print '預測模型: %s. 訊息:%s' %(prediction,X_test_raw.iloc[i])

--檢視正確性	
from sklearn import metrics
metrics.accuracy_score(y_test,y_predictions)	
0.96913137114142134

--套用Naive Bayesian
from sklearn.naive_bayes import BernoulliNB
clf = BernoulliNB()
clf.fit(X_train,y_train)

clf.score(X_test,y_test)
0.97415649676956206